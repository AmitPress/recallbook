<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amit&#39;s Recallbook</title>
    <link>https://amitpress.github.io/recallbook/</link>
    <description>Recent content on Amit&#39;s Recallbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Nov 2021 03:53:13 -0400</lastBuildDate><atom:link href="https://amitpress.github.io/recallbook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What it is? Vs How it works?</title>
      <link>https://amitpress.github.io/recallbook/posts/whatvshow/</link>
      <pubDate>Thu, 04 Nov 2021 03:53:13 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/whatvshow/</guid>
      <description>What Vs How dilemma :- From our infancy we are told what to do, what to think, what it is, what is the meaning of X etc etc.
So, we are engineered to think an event based on &amp;ldquo;What&amp;rdquo;. &amp;ldquo;What&amp;rdquo; is a top down approach to solve an issue or understand a topic.
Like, when you seek for &amp;ldquo;What&amp;rdquo; you get a definition. And what is definition? Definition is a set of attributes which defines an event or a matter.</description>
    </item>
    
    <item>
      <title>Abstractions</title>
      <link>https://amitpress.github.io/recallbook/posts/abstractions/</link>
      <pubDate>Tue, 02 Nov 2021 10:12:34 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/abstractions/</guid>
      <description>Why we want everything simplified? Abstraction is evil. But we need it. When we put wrappers around an actual work process and think the whole workprocess holistically as a black box what we do is we make abstractions.
When we run Python code, we also run assembly. But that is abstracted.
First Levels (low to high): i) Machine Code ii) Hexadecimal Code iii) Assembly Code iv) Fortran / C etc. v) Python</description>
    </item>
    
    <item>
      <title>AI and Future</title>
      <link>https://amitpress.github.io/recallbook/posts/aiandfuture/</link>
      <pubDate>Tue, 02 Nov 2021 09:57:50 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/aiandfuture/</guid>
      <description>&amp;ldquo;AI is overhyped, man never can achive the complexity of brain using metals.&amp;rdquo;
  I don&amp;rsquo;t think AI will take all the jobs away from the developer. You may point out some interesting projects like github co-pilot, Tesla model X etc. But if you look back to 2000, the games we used to play was very much intelligent. But in terms of AI we use something called Neuron. Neurons are nothing but tasks.</description>
    </item>
    
    <item>
      <title>Imperative vs Declarative</title>
      <link>https://amitpress.github.io/recallbook/posts/impvsdec/</link>
      <pubDate>Tue, 02 Nov 2021 09:47:32 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/impvsdec/</guid>
      <description>Imperative vs Declarative It is basically two different thought process. I felt like imperative style is more stangnant than declarative style. I know the choice is totally subjective and opinionated, though I feel declarative code is more elegant and understanable than imperative code.
For example,
class Person(): self.name = &amp;#39;&amp;#39; def name(self, name): self.name = name Now here, we will see the distinctive approaches of declarative and imperative coding.
For Declarative style we will do</description>
    </item>
    
    <item>
      <title>Decade of Web Frameworks</title>
      <link>https://amitpress.github.io/recallbook/posts/decadeofwebframeworks/</link>
      <pubDate>Wed, 20 Oct 2021 04:17:11 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/decadeofwebframeworks/</guid>
      <description>Utility of different web frameworks. In a decade web development has evolved like no other industries. So has the web technologies have evolved and been evolving as time flows. Creative minds, web dev pioneers and engineers are constantly working to have an unbloated, efficient, modern and tireless.
In early years of this decade, I mean in around 2010 to 2013, Ruby Lang became a hot cake. Many developers were turning towards ruby in large scale.</description>
    </item>
    
    <item>
      <title>Helloworld</title>
      <link>https://amitpress.github.io/recallbook/posts/helloworld/</link>
      <pubDate>Tue, 19 Oct 2021 04:32:11 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/helloworld/</guid>
      <description>def hello_world(): print(&amp;#34;hell_world&amp;#34;) hello_world() </description>
    </item>
    
    <item>
      <title>My Journey from NAND to tetris</title>
      <link>https://amitpress.github.io/recallbook/posts/nand2tetris/</link>
      <pubDate>Tue, 19 Oct 2021 04:32:11 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/nand2tetris/</guid>
      <description>NOTE: This will be a series of writings which is related to core computer science
  Nand to Tetris is a course designed by two Israeli computers geeks Noam Nisan and Simon Schocken. This module is produced by a bunch of computer enthusiasts and tought all over the world on demand. This is a quite good way to start learning about computer systems from the scratch. As the name suggest it starts with basics of Electronics and gradually end with building a proper computer system.</description>
    </item>
    
  </channel>
</rss>
