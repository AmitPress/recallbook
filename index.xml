<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amit&#39;s Recallbook</title>
    <link>https://amitpress.github.io/recallbook/</link>
    <description>Recent content on Amit&#39;s Recallbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Oct 2021 04:32:11 -0400</lastBuildDate><atom:link href="https://amitpress.github.io/recallbook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Helloworld</title>
      <link>https://amitpress.github.io/recallbook/posts/helloworld/</link>
      <pubDate>Tue, 19 Oct 2021 04:32:11 -0400</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/helloworld/</guid>
      <description>def hello_world(): print(&amp;#34;hell_world&amp;#34;) </description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://amitpress.github.io/recallbook/posts/demopost/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://amitpress.github.io/recallbook/posts/demopost/</guid>
      <description>Hugo uses the excellent [Go][] [html/template][gohtmltemplate] library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
from os def xx(): print(&amp;#39;hi&amp;#39;) </description>
    </item>
    
  </channel>
</rss>
